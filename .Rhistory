makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x
setInverse<-function(inverse)inv<<-inverse
getInverse<-function()inv
list(set=set,get=get,
setInverse=setInverse,
getInverse=getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
a<-x$get()
inv<-solve(a,...)
x$setInverse(inv)
inv
}
makeCacheMatrix(matrix(1:4,2,2))
makeCacheMatrix(matrix(1:4,2,2))$get()
makeCacheMatrix(matrix(1:4,2,2))$getInverse()
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
## Caching the inverse of a matrix
## Matrix inversion is usually a costly computation
## and there may be some benefit to caching the inverse of a matrix rather than compute it repeatedly
## Below are the two functions that can be used to creat a object
## which stores a matrix and caches inverse
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x
setInverse<-function(inverse)inv<<-inverse
getInverse<-function()inv
list(set=set,get=get,
setInverse=setInverse,
getInverse=getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
a<-x$get()
inv<-solve(a,...)
x$setInverse(inv)
inv
}
source("ProgrammingAssignment2/cachematrix.R")
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
